function dataExtract = Preproc(fname, shtname)
%PREPROC is used for processing raw data of CCDPro.
%   Raw data are originally stored in an Excel file.
%
%   See also SNGPREPROC.

%Here is a method of question category based way to read in data.
%By Zhang, Liang. 2015/11/27.
%Modified to use in another problem.
%Modification completed at 2016/04/13.

%Folder contains all the analysis and plots functions.
anafunpath = 'analysis';
addpath(anafunpath);
%Get sheets' names.
[~, sheets] = xlsfinfo(fname);
%Check input variables. Some basic checking for shtname variable.
if nargin < 2
    shtname = sheets';
end
if ~iscell(shtname)
    %When constructing table, character array is not allowed, but cell
    %string is allowed.
    shtname = {shtname};
end
if isrow(shtname)
    shtname = shtname';
end
%Log file.
logfid = fopen('readlog(autogenerated).log', 'w');
%Initializing works.
nsht = length(sheets);
shtRange = find(ismember(sheets, shtname));
nsht4process = length(shtRange);
if isequal(shtRange, 1:nsht) %Means all the tasks will be processed.
    userin = input('Will processing all the sheets, continue([Y]/N)?', 's');
    if strcmpi(userin, 'n') || strcmpi(userin, 'no')
        dataExtract = [];
        return
    end
end
Taskname = sheets(shtRange)';
Data = cell(nsht4process, 1);
%Preallocating.
dataExtract = table(Taskname, Data);
%Load parameters.
para = readtable('taskSettings.xlsx', 'Sheet', 'para');
settings = readtable('taskSettings.xlsx', 'Sheet', 'settings');
%Display the information of processing.
fprintf('Here it goes! This time, the total jobs are composed of %d tasks, though some may fail...\n', ...
    nsht4process);
%Sheet-wise processing.
for isht = 1:nsht4process
    initialVarsSht = who;
    %Find out the setting of current task.
    curTaskName = Taskname{isht};
    ordstr = num2ord(isht);
    fprintf('Now processing the %s task %s\n', ordstr, curTaskName);
    locset = ismember(settings.TaskName, curTaskName);
    if ~any(locset)
        fprintf('No settings specified for current task.\n');
        continue
    end
    %Read in all the information from the specified file.
    curTaskData = readtable(fname, 'Sheet', curTaskName);
    %Get the information of interest, and check the format.
    varsOfChk = {'Taskname', 'userId', 'gender', 'school', 'grade', 'birthDay', 'conditions'};
    varsOfChkClass = {'cell', 'double', 'cell', 'cell', 'cell', 'cell', 'cell'};
    for ivar = 1:length(varsOfChk)
        curVar = varsOfChk{ivar};
        curClass = varsOfChkClass{ivar};
        if ~isa(curTaskData.(curVar), curClass)
            switch curClass
                case 'cell'
                    curTaskData.(curVar) = num2cell(curTaskData.(curVar));
                case 'double'
                    curTaskData.(curVar) = str2double(curTaskData.(curVar));
            end
        end
    end
    %Get a table curTaskCfg to combine two variables: conditions and para,
    %which are used in the function sngproc. See more in function sngproc.
    curTaskSetting = settings(locset, :);
    curTaskPara = para(ismember(para.TemplateToken, curTaskSetting.TemplateToken), :);
    curTaskCfg = table;
    curTaskCfg.conditions = curTaskData.conditions;
    curTaskCfg.para = repmat({curTaskPara}, height(curTaskData), 1);
    cursplit = rowfun(@sngpreproc, curTaskCfg, 'OutputVariableNames', {'splitRes', 'status'});
    curTaskRes = cat(1, cursplit.splitRes{:});
    curTaskRes.status = cursplit.status;
    %Generate some warning according to the status.
    if any(cursplit.status ~= 0)
        warning('UDF:READSHT:DATAMISMATCH', 'Oops! Data mismatch in task %s.\n', curTaskName);
        if any(cursplit.status == -1) %Data mismatch found.
            fprintf(logfid, ...
                'Data mismatch encountered in task %s. Normally, its format is ''%s''.\r\n', ...
                curTaskName, curTaskPara.VariablesNames{:});
        end
        if any(cursplit.status == -2) %Parameters for this task not found.
            fprintf(logfid, ...
                'No parameters specification found in task %s.\r\n', ...
                curTaskName);
        end
    end
    %Use curTaskRes as the results variable store. And store the TaskIDName
    %from settings, which is usually used in the following analysis.
    curTaskOutVarsOIMetadata = ...
        {'userId', 'gender', 'school', 'grade', 'birthDay'};
    curTaskRes = curTaskData(:, ismember(curTaskData.Properties.VariableNames, curTaskOutVarsOIMetadata));
    curTaskRes.TaskIDName = repmat(curTaskSetting.TaskIDName, height(curTaskData), 1);
    %Store the spitting results.
    curTaskSpitRes = cat(1, cursplit.splitRes{:});
    curTaskSplitResVars = curTaskSpitRes.Properties.VariableNames;
    nvars = length(curTaskSplitResVars);
    for ivar = 1:nvars
        curTaskRes.(curTaskSplitResVars{ivar}) = curTaskSpitRes.(curTaskSplitResVars{ivar});
    end
    curTaskRes.status = cursplit.status;
    dataExtract.Data{isht} = curTaskRes;
    clearvars('-except', initialVarsSht{:});
end
fclose(logfid);
rmpath(anafunpath);
